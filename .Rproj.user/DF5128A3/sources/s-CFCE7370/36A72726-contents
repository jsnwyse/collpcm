/*Functions for the fitting of Latent Class Analysis models using MCMC
 methods. Two implementations of the model are included in the Bayesian
 formulation: collapsed and not collapsed.
 
 Author:	Jason Wyse,
 School of Computer Science and Statistics,
 Lloyd Institute,
 Trinity College,
 Dublin 2,
 Ireland.
 mailto: wyseja@tcd.ie
 
 Last modification of this code: Wed 29 July 2020  */


#include "COLLPCM_mixmod.h"

struct mix_mod *COLLPCM_allocate_mixmod(int n, int d, int G_max, int G, double *prior_hparams )
  /*this function allocates and returns a pointer to a mixmod structure...*/
{
  
  int i,j,k;

  struct mix_mod *mm = (struct mix_mod *)malloc(sizeof(struct mix_mod));
  
  mm->maxgroups = G_max;
  mm->G = G;
  mm->n = n;
  mm->d = d;
  
 // mm->z = (int *)calloc( n,sizeof(int) );
  mm->whereis = (int *)calloc( G_max, sizeof(int) );
  mm->components = (struct component **)malloc( sizeof(struct component *) * G_max );
  
  for( i=0; i<G_max; i++ )
    mm->components[i] = (struct component *)malloc(sizeof(struct component));
  
  
  // priors
  mm->prior_mu = (double *)calloc( d, sizeof(double) );
  mm->log_prior_G = (double *)calloc( G_max, sizeof(double) );
 
  // need to populate the hyperparameters
  
  return(mm);
  
}

struct mix_mod *COLLPCM_clone_mixmod( struct mix_mod *mm )
{
  
  int k;
  double *hparams = (double *)calloc( 2, sizeof(double) );
  hparams[0] = mm->alpha;
  hparams[1] = mm->beta;
  
  struct mix_mod *mm_clone; 
  
  mm_clone = COLLPCM_allocate_mixmod( mm->n, mm->d, mm->G, mm->G, hparams );
  
  for( k=0; k<mm->G; k++ )
    COLLPCM_copy_component( mm->components[k], mm_clone->components[k] , mm );
  
  free( hparams );
  
  return( mm_clone );
}


void COLLPCM_free_mixmod(struct mix_mod *mm)
  /*frees the memory used by mixmod object*/
{
  int n = mm->n,d = mm->d, G = mm->G, G_max = mm->maxgroups, i, j, k;
  
  //free up components
  for( k=0; k<G_max; k++ )
    {
    COLLPCM_free_component(mm->components[k], mm);
    free(mm->components[k]);
  }
  free(mm->components);
  
  //free wehreis
  free(mm->whereis);
  free(mm->log_prior_G);
  
  free(mm);
  
  return;
}




